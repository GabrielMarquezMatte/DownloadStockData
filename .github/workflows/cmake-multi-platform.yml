name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git
      
    - name: Remove '-latest' from OS name
      id: remove_latest
      shell: bash
      run: |
        os_name=${{ matrix.os }}
        if [[ "$os_name" == "ubuntu-latest" ]]; then
          os_name="linux"
        else
          os_name=${os_name%-latest}
        fi
        echo "os_name=$os_name" >> $GITHUB_ENV

    - name: Build only Release Mode
      shell: bash
      run: |
        echo "set(VCPKG_BUILD_TYPE release)" >> vcpkg/triplets/x64-${{ env.os_name }}.cmake
        cat vcpkg/triplets/x64-${{ env.os_name }}.cmake

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Generate tag and release names
      id: generate_names
      shell: bash
      run: |
        ref=${{ github.ref }}
        if [[ "$ref" == refs/heads/* ]]; then
          tag_name="${ref#refs/heads/}-$(date +'%Y%m%d%H')"
          release_name="Release for branch ${ref#refs/heads/} at $(date +'%Y-%m-%d %H')"
        else
          tag_name="$ref"
          release_name="Release $ref"
        fi
        echo "tag_name=$tag_name" >> $GITHUB_ENV
        echo "release_name=$release_name" >> $GITHUB_ENV
      

    - name: Check if Release Exists
      id: check_release
      run: |
        release_name="${{ env.release_name }}"
        releases=$(curl --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
        exists=$(echo "$releases" | jq ".[] | select(.name==\"$release_name\")")
        if [ -n "$exists" ]; then
          echo "Release already exists."
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "Release does not exist."
          echo "exists=false" >> $GITHUB_ENV
        fi

    - name: Create Release
      if: steps.check_release.outputs.exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag_name }}
        release_name: ${{ env.release_name }}
        draft: false
        prerelease: false

    - run: echo "Does GITHUB_TOKEN exist? ${{ env.GITHUB_TOKEN != '' }}"
      shell: bash

    - name: List files in build directory
      run: ls ${{ steps.strings.outputs.build-output-dir }}
      shell: bash

    - name: Zip Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      id: zip_release_asset_windows
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}/Release
        zip -r windows-Release.zip *
        echo "build-output-dir=${{ steps.strings.outputs.build-output-dir }}" >> "$GITHUB_OUTPUT"

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      id: upload_release_asset_windows
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/Release/windows-Release.zip
        asset_name: windows-Release.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset (Other OS)
      if: matrix.os != 'windows-latest'
      id: upload_release_asset_others
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/DownloadStockData
        asset_name: DownloadStockData-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.cpp_compiler }}.bin
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}