/**
 *
 *  TcotBovespa.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "TcotBovespa.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::testdb;

const std::string TcotBovespa::Cols::_dt_pregao = "dt_pregao";
const std::string TcotBovespa::Cols::_prz_termo = "prz_termo";
const std::string TcotBovespa::Cols::_cd_codneg = "cd_codneg";
const std::string TcotBovespa::Cols::_cd_tpmerc = "cd_tpmerc";
const std::string TcotBovespa::Cols::_cd_codbdi = "cd_codbdi";
const std::string TcotBovespa::Cols::_cd_codisin = "cd_codisin";
const std::string TcotBovespa::Cols::_nm_speci = "nm_speci";
const std::string TcotBovespa::Cols::_prec_aber = "prec_aber";
const std::string TcotBovespa::Cols::_prec_max = "prec_max";
const std::string TcotBovespa::Cols::_prec_min = "prec_min";
const std::string TcotBovespa::Cols::_prec_med = "prec_med";
const std::string TcotBovespa::Cols::_prec_fec = "prec_fec";
const std::string TcotBovespa::Cols::_prec_exer = "prec_exer";
const std::string TcotBovespa::Cols::_dt_datven = "dt_datven";
const std::string TcotBovespa::Cols::_fat_cot = "fat_cot";
const std::string TcotBovespa::Cols::_nr_dismes = "nr_dismes";
const std::vector<std::string> TcotBovespa::primaryKeyName = {"dt_pregao","prz_termo","cd_codneg"};
const bool TcotBovespa::hasPrimaryKey = true;
const std::string TcotBovespa::tableName = "tcot_bovespa";

const std::vector<typename TcotBovespa::MetaData> TcotBovespa::metaData_={
{"dt_pregao","::trantor::Date","date",0,0,1,1},
{"prz_termo","int32_t","integer",4,0,1,1},
{"cd_codneg","std::string","character varying",12,0,1,1},
{"cd_tpmerc","int32_t","integer",4,0,0,1},
{"cd_codbdi","int32_t","integer",4,0,0,1},
{"cd_codisin","std::string","character varying",12,0,0,1},
{"nm_speci","std::string","character varying",10,0,0,0},
{"prec_aber","double","double precision",8,0,0,1},
{"prec_max","double","double precision",8,0,0,1},
{"prec_min","double","double precision",8,0,0,1},
{"prec_med","double","double precision",8,0,0,1},
{"prec_fec","double","double precision",8,0,0,1},
{"prec_exer","double","double precision",8,0,0,1},
{"dt_datven","::trantor::Date","date",0,0,0,1},
{"fat_cot","int32_t","integer",4,0,0,1},
{"nr_dismes","int32_t","integer",4,0,0,1}
};
const std::string &TcotBovespa::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
TcotBovespa::TcotBovespa(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["dt_pregao"].isNull())
        {
            auto daysStr = r["dt_pregao"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtPregao_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["prz_termo"].isNull())
        {
            przTermo_=std::make_shared<int32_t>(r["prz_termo"].as<int32_t>());
        }
        if(!r["cd_codneg"].isNull())
        {
            cdCodneg_=std::make_shared<std::string>(r["cd_codneg"].as<std::string>());
        }
        if(!r["cd_tpmerc"].isNull())
        {
            cdTpmerc_=std::make_shared<int32_t>(r["cd_tpmerc"].as<int32_t>());
        }
        if(!r["cd_codbdi"].isNull())
        {
            cdCodbdi_=std::make_shared<int32_t>(r["cd_codbdi"].as<int32_t>());
        }
        if(!r["cd_codisin"].isNull())
        {
            cdCodisin_=std::make_shared<std::string>(r["cd_codisin"].as<std::string>());
        }
        if(!r["nm_speci"].isNull())
        {
            nmSpeci_=std::make_shared<std::string>(r["nm_speci"].as<std::string>());
        }
        if(!r["prec_aber"].isNull())
        {
            precAber_=std::make_shared<double>(r["prec_aber"].as<double>());
        }
        if(!r["prec_max"].isNull())
        {
            precMax_=std::make_shared<double>(r["prec_max"].as<double>());
        }
        if(!r["prec_min"].isNull())
        {
            precMin_=std::make_shared<double>(r["prec_min"].as<double>());
        }
        if(!r["prec_med"].isNull())
        {
            precMed_=std::make_shared<double>(r["prec_med"].as<double>());
        }
        if(!r["prec_fec"].isNull())
        {
            precFec_=std::make_shared<double>(r["prec_fec"].as<double>());
        }
        if(!r["prec_exer"].isNull())
        {
            precExer_=std::make_shared<double>(r["prec_exer"].as<double>());
        }
        if(!r["dt_datven"].isNull())
        {
            auto daysStr = r["dt_datven"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtDatven_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["fat_cot"].isNull())
        {
            fatCot_=std::make_shared<int32_t>(r["fat_cot"].as<int32_t>());
        }
        if(!r["nr_dismes"].isNull())
        {
            nrDismes_=std::make_shared<int32_t>(r["nr_dismes"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 16 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtPregao_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            przTermo_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            cdCodneg_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            cdTpmerc_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            cdCodbdi_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            cdCodisin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            nmSpeci_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            precAber_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            precMax_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            precMin_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            precMed_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            precFec_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            precExer_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtDatven_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            fatCot_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            nrDismes_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

TcotBovespa::TcotBovespa(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[0]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtPregao_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            przTermo_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            cdCodneg_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            cdTpmerc_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            cdCodbdi_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            cdCodisin_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            nmSpeci_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            precAber_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            precMax_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            precMin_=std::make_shared<double>(pJson[pMasqueradingVector[9]].asDouble());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            precMed_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            precFec_=std::make_shared<double>(pJson[pMasqueradingVector[11]].asDouble());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            precExer_=std::make_shared<double>(pJson[pMasqueradingVector[12]].asDouble());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtDatven_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            fatCot_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            nrDismes_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
}

TcotBovespa::TcotBovespa(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("dt_pregao"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["dt_pregao"].isNull())
        {
            auto daysStr = pJson["dt_pregao"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtPregao_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("prz_termo"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["prz_termo"].isNull())
        {
            przTermo_=std::make_shared<int32_t>((int32_t)pJson["prz_termo"].asInt64());
        }
    }
    if(pJson.isMember("cd_codneg"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["cd_codneg"].isNull())
        {
            cdCodneg_=std::make_shared<std::string>(pJson["cd_codneg"].asString());
        }
    }
    if(pJson.isMember("cd_tpmerc"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["cd_tpmerc"].isNull())
        {
            cdTpmerc_=std::make_shared<int32_t>((int32_t)pJson["cd_tpmerc"].asInt64());
        }
    }
    if(pJson.isMember("cd_codbdi"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["cd_codbdi"].isNull())
        {
            cdCodbdi_=std::make_shared<int32_t>((int32_t)pJson["cd_codbdi"].asInt64());
        }
    }
    if(pJson.isMember("cd_codisin"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["cd_codisin"].isNull())
        {
            cdCodisin_=std::make_shared<std::string>(pJson["cd_codisin"].asString());
        }
    }
    if(pJson.isMember("nm_speci"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["nm_speci"].isNull())
        {
            nmSpeci_=std::make_shared<std::string>(pJson["nm_speci"].asString());
        }
    }
    if(pJson.isMember("prec_aber"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["prec_aber"].isNull())
        {
            precAber_=std::make_shared<double>(pJson["prec_aber"].asDouble());
        }
    }
    if(pJson.isMember("prec_max"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["prec_max"].isNull())
        {
            precMax_=std::make_shared<double>(pJson["prec_max"].asDouble());
        }
    }
    if(pJson.isMember("prec_min"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["prec_min"].isNull())
        {
            precMin_=std::make_shared<double>(pJson["prec_min"].asDouble());
        }
    }
    if(pJson.isMember("prec_med"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["prec_med"].isNull())
        {
            precMed_=std::make_shared<double>(pJson["prec_med"].asDouble());
        }
    }
    if(pJson.isMember("prec_fec"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["prec_fec"].isNull())
        {
            precFec_=std::make_shared<double>(pJson["prec_fec"].asDouble());
        }
    }
    if(pJson.isMember("prec_exer"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["prec_exer"].isNull())
        {
            precExer_=std::make_shared<double>(pJson["prec_exer"].asDouble());
        }
    }
    if(pJson.isMember("dt_datven"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["dt_datven"].isNull())
        {
            auto daysStr = pJson["dt_datven"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtDatven_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("fat_cot"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["fat_cot"].isNull())
        {
            fatCot_=std::make_shared<int32_t>((int32_t)pJson["fat_cot"].asInt64());
        }
    }
    if(pJson.isMember("nr_dismes"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["nr_dismes"].isNull())
        {
            nrDismes_=std::make_shared<int32_t>((int32_t)pJson["nr_dismes"].asInt64());
        }
    }
}

void TcotBovespa::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[0]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtPregao_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            przTermo_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            cdCodneg_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            cdTpmerc_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            cdCodbdi_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            cdCodisin_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            nmSpeci_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            precAber_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            precMax_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            precMin_=std::make_shared<double>(pJson[pMasqueradingVector[9]].asDouble());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            precMed_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            precFec_=std::make_shared<double>(pJson[pMasqueradingVector[11]].asDouble());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            precExer_=std::make_shared<double>(pJson[pMasqueradingVector[12]].asDouble());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtDatven_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            fatCot_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[14]].asInt64());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            nrDismes_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[15]].asInt64());
        }
    }
}

void TcotBovespa::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("dt_pregao"))
    {
        if(!pJson["dt_pregao"].isNull())
        {
            auto daysStr = pJson["dt_pregao"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtPregao_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("prz_termo"))
    {
        if(!pJson["prz_termo"].isNull())
        {
            przTermo_=std::make_shared<int32_t>((int32_t)pJson["prz_termo"].asInt64());
        }
    }
    if(pJson.isMember("cd_codneg"))
    {
        if(!pJson["cd_codneg"].isNull())
        {
            cdCodneg_=std::make_shared<std::string>(pJson["cd_codneg"].asString());
        }
    }
    if(pJson.isMember("cd_tpmerc"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["cd_tpmerc"].isNull())
        {
            cdTpmerc_=std::make_shared<int32_t>((int32_t)pJson["cd_tpmerc"].asInt64());
        }
    }
    if(pJson.isMember("cd_codbdi"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["cd_codbdi"].isNull())
        {
            cdCodbdi_=std::make_shared<int32_t>((int32_t)pJson["cd_codbdi"].asInt64());
        }
    }
    if(pJson.isMember("cd_codisin"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["cd_codisin"].isNull())
        {
            cdCodisin_=std::make_shared<std::string>(pJson["cd_codisin"].asString());
        }
    }
    if(pJson.isMember("nm_speci"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["nm_speci"].isNull())
        {
            nmSpeci_=std::make_shared<std::string>(pJson["nm_speci"].asString());
        }
    }
    if(pJson.isMember("prec_aber"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["prec_aber"].isNull())
        {
            precAber_=std::make_shared<double>(pJson["prec_aber"].asDouble());
        }
    }
    if(pJson.isMember("prec_max"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["prec_max"].isNull())
        {
            precMax_=std::make_shared<double>(pJson["prec_max"].asDouble());
        }
    }
    if(pJson.isMember("prec_min"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["prec_min"].isNull())
        {
            precMin_=std::make_shared<double>(pJson["prec_min"].asDouble());
        }
    }
    if(pJson.isMember("prec_med"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["prec_med"].isNull())
        {
            precMed_=std::make_shared<double>(pJson["prec_med"].asDouble());
        }
    }
    if(pJson.isMember("prec_fec"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["prec_fec"].isNull())
        {
            precFec_=std::make_shared<double>(pJson["prec_fec"].asDouble());
        }
    }
    if(pJson.isMember("prec_exer"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["prec_exer"].isNull())
        {
            precExer_=std::make_shared<double>(pJson["prec_exer"].asDouble());
        }
    }
    if(pJson.isMember("dt_datven"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["dt_datven"].isNull())
        {
            auto daysStr = pJson["dt_datven"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            dtDatven_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("fat_cot"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["fat_cot"].isNull())
        {
            fatCot_=std::make_shared<int32_t>((int32_t)pJson["fat_cot"].asInt64());
        }
    }
    if(pJson.isMember("nr_dismes"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["nr_dismes"].isNull())
        {
            nrDismes_=std::make_shared<int32_t>((int32_t)pJson["nr_dismes"].asInt64());
        }
    }
}

const ::trantor::Date &TcotBovespa::getValueOfDtPregao() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(dtPregao_)
        return *dtPregao_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TcotBovespa::getDtPregao() const noexcept
{
    return dtPregao_;
}
void TcotBovespa::setDtPregao(const ::trantor::Date &pDtPregao) noexcept
{
    dtPregao_ = std::make_shared<::trantor::Date>(pDtPregao.roundDay());
    dirtyFlag_[0] = true;
}

const int32_t &TcotBovespa::getValueOfPrzTermo() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(przTermo_)
        return *przTermo_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TcotBovespa::getPrzTermo() const noexcept
{
    return przTermo_;
}
void TcotBovespa::setPrzTermo(const int32_t &pPrzTermo) noexcept
{
    przTermo_ = std::make_shared<int32_t>(pPrzTermo);
    dirtyFlag_[1] = true;
}

const std::string &TcotBovespa::getValueOfCdCodneg() const noexcept
{
    static const std::string defaultValue = std::string();
    if(cdCodneg_)
        return *cdCodneg_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TcotBovespa::getCdCodneg() const noexcept
{
    return cdCodneg_;
}
void TcotBovespa::setCdCodneg(const std::string &pCdCodneg) noexcept
{
    cdCodneg_ = std::make_shared<std::string>(pCdCodneg);
    dirtyFlag_[2] = true;
}
void TcotBovespa::setCdCodneg(std::string &&pCdCodneg) noexcept
{
    cdCodneg_ = std::make_shared<std::string>(std::move(pCdCodneg));
    dirtyFlag_[2] = true;
}

const int32_t &TcotBovespa::getValueOfCdTpmerc() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(cdTpmerc_)
        return *cdTpmerc_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TcotBovespa::getCdTpmerc() const noexcept
{
    return cdTpmerc_;
}
void TcotBovespa::setCdTpmerc(const int32_t &pCdTpmerc) noexcept
{
    cdTpmerc_ = std::make_shared<int32_t>(pCdTpmerc);
    dirtyFlag_[3] = true;
}

const int32_t &TcotBovespa::getValueOfCdCodbdi() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(cdCodbdi_)
        return *cdCodbdi_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TcotBovespa::getCdCodbdi() const noexcept
{
    return cdCodbdi_;
}
void TcotBovespa::setCdCodbdi(const int32_t &pCdCodbdi) noexcept
{
    cdCodbdi_ = std::make_shared<int32_t>(pCdCodbdi);
    dirtyFlag_[4] = true;
}

const std::string &TcotBovespa::getValueOfCdCodisin() const noexcept
{
    static const std::string defaultValue = std::string();
    if(cdCodisin_)
        return *cdCodisin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TcotBovespa::getCdCodisin() const noexcept
{
    return cdCodisin_;
}
void TcotBovespa::setCdCodisin(const std::string &pCdCodisin) noexcept
{
    cdCodisin_ = std::make_shared<std::string>(pCdCodisin);
    dirtyFlag_[5] = true;
}
void TcotBovespa::setCdCodisin(std::string &&pCdCodisin) noexcept
{
    cdCodisin_ = std::make_shared<std::string>(std::move(pCdCodisin));
    dirtyFlag_[5] = true;
}

const std::string &TcotBovespa::getValueOfNmSpeci() const noexcept
{
    static const std::string defaultValue = std::string();
    if(nmSpeci_)
        return *nmSpeci_;
    return defaultValue;
}
const std::shared_ptr<std::string> &TcotBovespa::getNmSpeci() const noexcept
{
    return nmSpeci_;
}
void TcotBovespa::setNmSpeci(const std::string &pNmSpeci) noexcept
{
    nmSpeci_ = std::make_shared<std::string>(pNmSpeci);
    dirtyFlag_[6] = true;
}
void TcotBovespa::setNmSpeci(std::string &&pNmSpeci) noexcept
{
    nmSpeci_ = std::make_shared<std::string>(std::move(pNmSpeci));
    dirtyFlag_[6] = true;
}
void TcotBovespa::setNmSpeciToNull() noexcept
{
    nmSpeci_.reset();
    dirtyFlag_[6] = true;
}

const double &TcotBovespa::getValueOfPrecAber() const noexcept
{
    static const double defaultValue = double();
    if(precAber_)
        return *precAber_;
    return defaultValue;
}
const std::shared_ptr<double> &TcotBovespa::getPrecAber() const noexcept
{
    return precAber_;
}
void TcotBovespa::setPrecAber(const double &pPrecAber) noexcept
{
    precAber_ = std::make_shared<double>(pPrecAber);
    dirtyFlag_[7] = true;
}

const double &TcotBovespa::getValueOfPrecMax() const noexcept
{
    static const double defaultValue = double();
    if(precMax_)
        return *precMax_;
    return defaultValue;
}
const std::shared_ptr<double> &TcotBovespa::getPrecMax() const noexcept
{
    return precMax_;
}
void TcotBovespa::setPrecMax(const double &pPrecMax) noexcept
{
    precMax_ = std::make_shared<double>(pPrecMax);
    dirtyFlag_[8] = true;
}

const double &TcotBovespa::getValueOfPrecMin() const noexcept
{
    static const double defaultValue = double();
    if(precMin_)
        return *precMin_;
    return defaultValue;
}
const std::shared_ptr<double> &TcotBovespa::getPrecMin() const noexcept
{
    return precMin_;
}
void TcotBovespa::setPrecMin(const double &pPrecMin) noexcept
{
    precMin_ = std::make_shared<double>(pPrecMin);
    dirtyFlag_[9] = true;
}

const double &TcotBovespa::getValueOfPrecMed() const noexcept
{
    static const double defaultValue = double();
    if(precMed_)
        return *precMed_;
    return defaultValue;
}
const std::shared_ptr<double> &TcotBovespa::getPrecMed() const noexcept
{
    return precMed_;
}
void TcotBovespa::setPrecMed(const double &pPrecMed) noexcept
{
    precMed_ = std::make_shared<double>(pPrecMed);
    dirtyFlag_[10] = true;
}

const double &TcotBovespa::getValueOfPrecFec() const noexcept
{
    static const double defaultValue = double();
    if(precFec_)
        return *precFec_;
    return defaultValue;
}
const std::shared_ptr<double> &TcotBovespa::getPrecFec() const noexcept
{
    return precFec_;
}
void TcotBovespa::setPrecFec(const double &pPrecFec) noexcept
{
    precFec_ = std::make_shared<double>(pPrecFec);
    dirtyFlag_[11] = true;
}

const double &TcotBovespa::getValueOfPrecExer() const noexcept
{
    static const double defaultValue = double();
    if(precExer_)
        return *precExer_;
    return defaultValue;
}
const std::shared_ptr<double> &TcotBovespa::getPrecExer() const noexcept
{
    return precExer_;
}
void TcotBovespa::setPrecExer(const double &pPrecExer) noexcept
{
    precExer_ = std::make_shared<double>(pPrecExer);
    dirtyFlag_[12] = true;
}

const ::trantor::Date &TcotBovespa::getValueOfDtDatven() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(dtDatven_)
        return *dtDatven_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &TcotBovespa::getDtDatven() const noexcept
{
    return dtDatven_;
}
void TcotBovespa::setDtDatven(const ::trantor::Date &pDtDatven) noexcept
{
    dtDatven_ = std::make_shared<::trantor::Date>(pDtDatven.roundDay());
    dirtyFlag_[13] = true;
}

const int32_t &TcotBovespa::getValueOfFatCot() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(fatCot_)
        return *fatCot_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TcotBovespa::getFatCot() const noexcept
{
    return fatCot_;
}
void TcotBovespa::setFatCot(const int32_t &pFatCot) noexcept
{
    fatCot_ = std::make_shared<int32_t>(pFatCot);
    dirtyFlag_[14] = true;
}

const int32_t &TcotBovespa::getValueOfNrDismes() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(nrDismes_)
        return *nrDismes_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &TcotBovespa::getNrDismes() const noexcept
{
    return nrDismes_;
}
void TcotBovespa::setNrDismes(const int32_t &pNrDismes) noexcept
{
    nrDismes_ = std::make_shared<int32_t>(pNrDismes);
    dirtyFlag_[15] = true;
}

void TcotBovespa::updateId(const uint64_t id)
{
}
typename TcotBovespa::PrimaryKeyType TcotBovespa::getPrimaryKey() const
{
    return std::make_tuple(*dtPregao_,*przTermo_,*cdCodneg_);
}

const std::vector<std::string> &TcotBovespa::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "dt_pregao",
        "prz_termo",
        "cd_codneg",
        "cd_tpmerc",
        "cd_codbdi",
        "cd_codisin",
        "nm_speci",
        "prec_aber",
        "prec_max",
        "prec_min",
        "prec_med",
        "prec_fec",
        "prec_exer",
        "dt_datven",
        "fat_cot",
        "nr_dismes"
    };
    return inCols;
}

void TcotBovespa::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getDtPregao())
        {
            binder << getValueOfDtPregao();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPrzTermo())
        {
            binder << getValueOfPrzTermo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCdCodneg())
        {
            binder << getValueOfCdCodneg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCdTpmerc())
        {
            binder << getValueOfCdTpmerc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCdCodbdi())
        {
            binder << getValueOfCdCodbdi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCdCodisin())
        {
            binder << getValueOfCdCodisin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getNmSpeci())
        {
            binder << getValueOfNmSpeci();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPrecAber())
        {
            binder << getValueOfPrecAber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPrecMax())
        {
            binder << getValueOfPrecMax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPrecMin())
        {
            binder << getValueOfPrecMin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPrecMed())
        {
            binder << getValueOfPrecMed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPrecFec())
        {
            binder << getValueOfPrecFec();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPrecExer())
        {
            binder << getValueOfPrecExer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getDtDatven())
        {
            binder << getValueOfDtDatven();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getFatCot())
        {
            binder << getValueOfFatCot();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getNrDismes())
        {
            binder << getValueOfNrDismes();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> TcotBovespa::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    return ret;
}

void TcotBovespa::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getDtPregao())
        {
            binder << getValueOfDtPregao();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getPrzTermo())
        {
            binder << getValueOfPrzTermo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCdCodneg())
        {
            binder << getValueOfCdCodneg();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCdTpmerc())
        {
            binder << getValueOfCdTpmerc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCdCodbdi())
        {
            binder << getValueOfCdCodbdi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCdCodisin())
        {
            binder << getValueOfCdCodisin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getNmSpeci())
        {
            binder << getValueOfNmSpeci();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPrecAber())
        {
            binder << getValueOfPrecAber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPrecMax())
        {
            binder << getValueOfPrecMax();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPrecMin())
        {
            binder << getValueOfPrecMin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPrecMed())
        {
            binder << getValueOfPrecMed();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getPrecFec())
        {
            binder << getValueOfPrecFec();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getPrecExer())
        {
            binder << getValueOfPrecExer();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getDtDatven())
        {
            binder << getValueOfDtDatven();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getFatCot())
        {
            binder << getValueOfFatCot();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getNrDismes())
        {
            binder << getValueOfNrDismes();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value TcotBovespa::toJson() const
{
    Json::Value ret;
    if(getDtPregao())
    {
        ret["dt_pregao"]=getDtPregao()->toDbStringLocal();
    }
    else
    {
        ret["dt_pregao"]=Json::Value();
    }
    if(getPrzTermo())
    {
        ret["prz_termo"]=getValueOfPrzTermo();
    }
    else
    {
        ret["prz_termo"]=Json::Value();
    }
    if(getCdCodneg())
    {
        ret["cd_codneg"]=getValueOfCdCodneg();
    }
    else
    {
        ret["cd_codneg"]=Json::Value();
    }
    if(getCdTpmerc())
    {
        ret["cd_tpmerc"]=getValueOfCdTpmerc();
    }
    else
    {
        ret["cd_tpmerc"]=Json::Value();
    }
    if(getCdCodbdi())
    {
        ret["cd_codbdi"]=getValueOfCdCodbdi();
    }
    else
    {
        ret["cd_codbdi"]=Json::Value();
    }
    if(getCdCodisin())
    {
        ret["cd_codisin"]=getValueOfCdCodisin();
    }
    else
    {
        ret["cd_codisin"]=Json::Value();
    }
    if(getNmSpeci())
    {
        ret["nm_speci"]=getValueOfNmSpeci();
    }
    else
    {
        ret["nm_speci"]=Json::Value();
    }
    if(getPrecAber())
    {
        ret["prec_aber"]=getValueOfPrecAber();
    }
    else
    {
        ret["prec_aber"]=Json::Value();
    }
    if(getPrecMax())
    {
        ret["prec_max"]=getValueOfPrecMax();
    }
    else
    {
        ret["prec_max"]=Json::Value();
    }
    if(getPrecMin())
    {
        ret["prec_min"]=getValueOfPrecMin();
    }
    else
    {
        ret["prec_min"]=Json::Value();
    }
    if(getPrecMed())
    {
        ret["prec_med"]=getValueOfPrecMed();
    }
    else
    {
        ret["prec_med"]=Json::Value();
    }
    if(getPrecFec())
    {
        ret["prec_fec"]=getValueOfPrecFec();
    }
    else
    {
        ret["prec_fec"]=Json::Value();
    }
    if(getPrecExer())
    {
        ret["prec_exer"]=getValueOfPrecExer();
    }
    else
    {
        ret["prec_exer"]=Json::Value();
    }
    if(getDtDatven())
    {
        ret["dt_datven"]=getDtDatven()->toDbStringLocal();
    }
    else
    {
        ret["dt_datven"]=Json::Value();
    }
    if(getFatCot())
    {
        ret["fat_cot"]=getValueOfFatCot();
    }
    else
    {
        ret["fat_cot"]=Json::Value();
    }
    if(getNrDismes())
    {
        ret["nr_dismes"]=getValueOfNrDismes();
    }
    else
    {
        ret["nr_dismes"]=Json::Value();
    }
    return ret;
}

Json::Value TcotBovespa::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 16)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getDtPregao())
            {
                ret[pMasqueradingVector[0]]=getDtPregao()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPrzTermo())
            {
                ret[pMasqueradingVector[1]]=getValueOfPrzTermo();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCdCodneg())
            {
                ret[pMasqueradingVector[2]]=getValueOfCdCodneg();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCdTpmerc())
            {
                ret[pMasqueradingVector[3]]=getValueOfCdTpmerc();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCdCodbdi())
            {
                ret[pMasqueradingVector[4]]=getValueOfCdCodbdi();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCdCodisin())
            {
                ret[pMasqueradingVector[5]]=getValueOfCdCodisin();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getNmSpeci())
            {
                ret[pMasqueradingVector[6]]=getValueOfNmSpeci();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPrecAber())
            {
                ret[pMasqueradingVector[7]]=getValueOfPrecAber();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getPrecMax())
            {
                ret[pMasqueradingVector[8]]=getValueOfPrecMax();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getPrecMin())
            {
                ret[pMasqueradingVector[9]]=getValueOfPrecMin();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPrecMed())
            {
                ret[pMasqueradingVector[10]]=getValueOfPrecMed();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getPrecFec())
            {
                ret[pMasqueradingVector[11]]=getValueOfPrecFec();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getPrecExer())
            {
                ret[pMasqueradingVector[12]]=getValueOfPrecExer();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getDtDatven())
            {
                ret[pMasqueradingVector[13]]=getDtDatven()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getFatCot())
            {
                ret[pMasqueradingVector[14]]=getValueOfFatCot();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getNrDismes())
            {
                ret[pMasqueradingVector[15]]=getValueOfNrDismes();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getDtPregao())
    {
        ret["dt_pregao"]=getDtPregao()->toDbStringLocal();
    }
    else
    {
        ret["dt_pregao"]=Json::Value();
    }
    if(getPrzTermo())
    {
        ret["prz_termo"]=getValueOfPrzTermo();
    }
    else
    {
        ret["prz_termo"]=Json::Value();
    }
    if(getCdCodneg())
    {
        ret["cd_codneg"]=getValueOfCdCodneg();
    }
    else
    {
        ret["cd_codneg"]=Json::Value();
    }
    if(getCdTpmerc())
    {
        ret["cd_tpmerc"]=getValueOfCdTpmerc();
    }
    else
    {
        ret["cd_tpmerc"]=Json::Value();
    }
    if(getCdCodbdi())
    {
        ret["cd_codbdi"]=getValueOfCdCodbdi();
    }
    else
    {
        ret["cd_codbdi"]=Json::Value();
    }
    if(getCdCodisin())
    {
        ret["cd_codisin"]=getValueOfCdCodisin();
    }
    else
    {
        ret["cd_codisin"]=Json::Value();
    }
    if(getNmSpeci())
    {
        ret["nm_speci"]=getValueOfNmSpeci();
    }
    else
    {
        ret["nm_speci"]=Json::Value();
    }
    if(getPrecAber())
    {
        ret["prec_aber"]=getValueOfPrecAber();
    }
    else
    {
        ret["prec_aber"]=Json::Value();
    }
    if(getPrecMax())
    {
        ret["prec_max"]=getValueOfPrecMax();
    }
    else
    {
        ret["prec_max"]=Json::Value();
    }
    if(getPrecMin())
    {
        ret["prec_min"]=getValueOfPrecMin();
    }
    else
    {
        ret["prec_min"]=Json::Value();
    }
    if(getPrecMed())
    {
        ret["prec_med"]=getValueOfPrecMed();
    }
    else
    {
        ret["prec_med"]=Json::Value();
    }
    if(getPrecFec())
    {
        ret["prec_fec"]=getValueOfPrecFec();
    }
    else
    {
        ret["prec_fec"]=Json::Value();
    }
    if(getPrecExer())
    {
        ret["prec_exer"]=getValueOfPrecExer();
    }
    else
    {
        ret["prec_exer"]=Json::Value();
    }
    if(getDtDatven())
    {
        ret["dt_datven"]=getDtDatven()->toDbStringLocal();
    }
    else
    {
        ret["dt_datven"]=Json::Value();
    }
    if(getFatCot())
    {
        ret["fat_cot"]=getValueOfFatCot();
    }
    else
    {
        ret["fat_cot"]=Json::Value();
    }
    if(getNrDismes())
    {
        ret["nr_dismes"]=getValueOfNrDismes();
    }
    else
    {
        ret["nr_dismes"]=Json::Value();
    }
    return ret;
}

bool TcotBovespa::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("dt_pregao"))
    {
        if(!validJsonOfField(0, "dt_pregao", pJson["dt_pregao"], err, true))
            return false;
    }
    else
    {
        err="The dt_pregao column cannot be null";
        return false;
    }
    if(pJson.isMember("prz_termo"))
    {
        if(!validJsonOfField(1, "prz_termo", pJson["prz_termo"], err, true))
            return false;
    }
    else
    {
        err="The prz_termo column cannot be null";
        return false;
    }
    if(pJson.isMember("cd_codneg"))
    {
        if(!validJsonOfField(2, "cd_codneg", pJson["cd_codneg"], err, true))
            return false;
    }
    else
    {
        err="The cd_codneg column cannot be null";
        return false;
    }
    if(pJson.isMember("cd_tpmerc"))
    {
        if(!validJsonOfField(3, "cd_tpmerc", pJson["cd_tpmerc"], err, true))
            return false;
    }
    else
    {
        err="The cd_tpmerc column cannot be null";
        return false;
    }
    if(pJson.isMember("cd_codbdi"))
    {
        if(!validJsonOfField(4, "cd_codbdi", pJson["cd_codbdi"], err, true))
            return false;
    }
    else
    {
        err="The cd_codbdi column cannot be null";
        return false;
    }
    if(pJson.isMember("cd_codisin"))
    {
        if(!validJsonOfField(5, "cd_codisin", pJson["cd_codisin"], err, true))
            return false;
    }
    else
    {
        err="The cd_codisin column cannot be null";
        return false;
    }
    if(pJson.isMember("nm_speci"))
    {
        if(!validJsonOfField(6, "nm_speci", pJson["nm_speci"], err, true))
            return false;
    }
    if(pJson.isMember("prec_aber"))
    {
        if(!validJsonOfField(7, "prec_aber", pJson["prec_aber"], err, true))
            return false;
    }
    else
    {
        err="The prec_aber column cannot be null";
        return false;
    }
    if(pJson.isMember("prec_max"))
    {
        if(!validJsonOfField(8, "prec_max", pJson["prec_max"], err, true))
            return false;
    }
    else
    {
        err="The prec_max column cannot be null";
        return false;
    }
    if(pJson.isMember("prec_min"))
    {
        if(!validJsonOfField(9, "prec_min", pJson["prec_min"], err, true))
            return false;
    }
    else
    {
        err="The prec_min column cannot be null";
        return false;
    }
    if(pJson.isMember("prec_med"))
    {
        if(!validJsonOfField(10, "prec_med", pJson["prec_med"], err, true))
            return false;
    }
    else
    {
        err="The prec_med column cannot be null";
        return false;
    }
    if(pJson.isMember("prec_fec"))
    {
        if(!validJsonOfField(11, "prec_fec", pJson["prec_fec"], err, true))
            return false;
    }
    else
    {
        err="The prec_fec column cannot be null";
        return false;
    }
    if(pJson.isMember("prec_exer"))
    {
        if(!validJsonOfField(12, "prec_exer", pJson["prec_exer"], err, true))
            return false;
    }
    else
    {
        err="The prec_exer column cannot be null";
        return false;
    }
    if(pJson.isMember("dt_datven"))
    {
        if(!validJsonOfField(13, "dt_datven", pJson["dt_datven"], err, true))
            return false;
    }
    else
    {
        err="The dt_datven column cannot be null";
        return false;
    }
    if(pJson.isMember("fat_cot"))
    {
        if(!validJsonOfField(14, "fat_cot", pJson["fat_cot"], err, true))
            return false;
    }
    else
    {
        err="The fat_cot column cannot be null";
        return false;
    }
    if(pJson.isMember("nr_dismes"))
    {
        if(!validJsonOfField(15, "nr_dismes", pJson["nr_dismes"], err, true))
            return false;
    }
    else
    {
        err="The nr_dismes column cannot be null";
        return false;
    }
    return true;
}
bool TcotBovespa::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[13] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[14] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[15] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TcotBovespa::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("dt_pregao"))
    {
        if(!validJsonOfField(0, "dt_pregao", pJson["dt_pregao"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("prz_termo"))
    {
        if(!validJsonOfField(1, "prz_termo", pJson["prz_termo"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("cd_codneg"))
    {
        if(!validJsonOfField(2, "cd_codneg", pJson["cd_codneg"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("cd_tpmerc"))
    {
        if(!validJsonOfField(3, "cd_tpmerc", pJson["cd_tpmerc"], err, false))
            return false;
    }
    if(pJson.isMember("cd_codbdi"))
    {
        if(!validJsonOfField(4, "cd_codbdi", pJson["cd_codbdi"], err, false))
            return false;
    }
    if(pJson.isMember("cd_codisin"))
    {
        if(!validJsonOfField(5, "cd_codisin", pJson["cd_codisin"], err, false))
            return false;
    }
    if(pJson.isMember("nm_speci"))
    {
        if(!validJsonOfField(6, "nm_speci", pJson["nm_speci"], err, false))
            return false;
    }
    if(pJson.isMember("prec_aber"))
    {
        if(!validJsonOfField(7, "prec_aber", pJson["prec_aber"], err, false))
            return false;
    }
    if(pJson.isMember("prec_max"))
    {
        if(!validJsonOfField(8, "prec_max", pJson["prec_max"], err, false))
            return false;
    }
    if(pJson.isMember("prec_min"))
    {
        if(!validJsonOfField(9, "prec_min", pJson["prec_min"], err, false))
            return false;
    }
    if(pJson.isMember("prec_med"))
    {
        if(!validJsonOfField(10, "prec_med", pJson["prec_med"], err, false))
            return false;
    }
    if(pJson.isMember("prec_fec"))
    {
        if(!validJsonOfField(11, "prec_fec", pJson["prec_fec"], err, false))
            return false;
    }
    if(pJson.isMember("prec_exer"))
    {
        if(!validJsonOfField(12, "prec_exer", pJson["prec_exer"], err, false))
            return false;
    }
    if(pJson.isMember("dt_datven"))
    {
        if(!validJsonOfField(13, "dt_datven", pJson["dt_datven"], err, false))
            return false;
    }
    if(pJson.isMember("fat_cot"))
    {
        if(!validJsonOfField(14, "fat_cot", pJson["fat_cot"], err, false))
            return false;
    }
    if(pJson.isMember("nr_dismes"))
    {
        if(!validJsonOfField(15, "nr_dismes", pJson["nr_dismes"], err, false))
            return false;
    }
    return true;
}
bool TcotBovespa::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool TcotBovespa::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 12)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 12)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 12)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 12)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
